# input các biểu thức ở trong ngoặc
# (a+b)
# (c)
# (a+b)*(c)
import re
import turtle
import time

def draw_x():
    t.color('black')
    t.width(3)
    t.left(45)
    t.forward(10)
    t.back(20)
    t.forward(10)
    t.right(90)
    t.forward(10)
    t.backward(20)
    t.forward(10)
    t.left(45)

def draw_A(str):
    t.speed(5)
    t.width(3)
    t.color('blue')
    t.left(90)
    t.forward(50)
    ls_heads.append(t.pos())
    t.backward(50)
    t.right(90)
    draw_x()
    t.color('green1')
    t.forward(50)
    t.color('black')
    t.write("D", align="right", font=("Arial", 15, "normal"))
    t.left(90)
    t.color('red1')
    t.forward(25)
    t.color('black')
    t.write(str[1].upper(), font=("Arial", 15, "normal"))
    t.color('red1')
    t.backward(50)
    t.forward(25)
    t.right(90)
    t.color('black')
    t.write("S", font=("Arial", 15, "normal"))
    t.color('green1')
    t.forward(50)
    draw_x()
    t.right(90)
    t.color('blue')
    t.forward(50)
    ls_tails.append(t.pos())
    t.penup()
    t.goto(-200, t.ycor() - 50)
    t.left(90)
    t.pendown()

def draw_A_pdiff(str):
    t.speed(5)
    t.width(3)
    t.color('blue')
    t.left(90)
    t.forward(50)
    pdiff_heads.append(t.pos())
    t.backward(50)
    t.right(90)
    draw_x()
    t.color('yellow')
    t.forward(50)
    t.color('black')
    t.write("S", align="right", font=("Arial", 15, "normal"))
    t.left(90)
    t.color('red1')
    t.forward(25)
    t.color('black')
    t.write(str[1].upper(), font=("Arial", 15, "normal"))
    t.color('red1')
    t.backward(50)
    t.forward(25)
    t.right(90)
    t.color('black')
    t.write("D", font=("Arial", 15, "normal"))
    t.color('yellow')
    t.forward(50)
    draw_x()
    t.color('blue')
    t.right(90)
    t.forward(50)
    pdiff_tails.append(t.pos())
    t.penup()
    t.goto(-200, t.ycor() + 150)
    t.left(90)
    t.pendown()
    
def draw_AorB_pdiff(str):
    t.speed(5)
    t.width(3)
    t.color('blue')
    t.left(90)
    t.forward(50)
    pdiff_heads.append(t.pos())
    t.backward(50)
    t.right(90)
    draw_x()
    t.color('yellow')
    t.forward(50)
    t.color('black')
    t.write("S", align="right", font=("Arial", 15, "normal"))
    t.left(90)
    t.color('red1')
    t.forward(25)
    t.color('black')
    t.write(str[1].upper(), font=("Arial", 15, "normal"))
    t.color('red1')
    t.backward(50)
    t.forward(25)
    t.right(90)
    t.color('black')
    t.write("D", font=("Arial", 15, "normal"))
    t.color('yellow')
    t.forward(100)
    t.color('black')
    t.write("S", align="right", font=("Arial", 15, "normal"))
    t.left(90)
    t.color('red1')
    t.forward(25)
    t.color('black')
    t.write(str[3].upper(), font=("Arial", 15, "normal"))
    t.color('red1')
    t.backward(50)
    t.forward(25)
    t.right(90)
    t.color('black')
    t.write("D", font=("Arial", 15, "normal"))
    t.color('yellow')
    t.forward(50)
    t.right(90)
    draw_x()
    t.color('blue')
    t.forward(50)
    pdiff_tails.append(t.pos())
    t.penup()
    t.goto(-200, t.ycor() + 150)
    t.left(90)
    t.pendown()
    
def draw_AorB(str):
    t.speed(5)
    t.width(3)
    t.color('blue')
    t.left(90)
    t.forward(50)
    ls_heads.append(t.pos())
    t.backward(50)
    t.right(90)
    draw_x()
    t.color('green1')
    t.forward(50)
    t.color('black')
    t.write("D", align="right", font=("Arial", 15, "normal"))
    t.left(90)
    t.color('red1')
    t.forward(25)
    t.color('black')
    t.write(str[1].upper(), font=("Arial", 15, "normal"))
    t.color('red1')
    t.backward(50)
    t.forward(25)
    t.right(90)
    t.color('black')
    t.write("S", font=("Arial", 15, "normal"))
    t.color('green1')
    t.forward(50)
    t.right(90)
    draw_x()
    t.color('blue')
    t.forward(50)
    ls_tails.append(t.pos())
    t.backward(50)
    t.left(90)
    t.color('green1')
    t.forward(50)
    t.color('black')
    t.write("S", align="right", font=("Arial", 15, "normal"))
    t.left(90)
    t.color('red1')
    t.forward(25)
    t.color('black')
    t.write(str[3].upper(), font=("Arial", 15, "normal"))
    t.color('red')
    t.backward(50)
    t.forward(25)
    t.right(90)
    t.color('black')
    t.write("D", font=("Arial", 15, "normal"))
    t.color('green1')
    t.forward(50)
    t.left(90)
    t.forward(40)
    t.left(90)
    t.forward(175)
    t.left(90)
    t.forward(40)
    t.left(90)
    t.penup()
    t.goto(-200, t.ycor() - 100)
    t.pendown()

def draw_AandB_ndiff(str):
    t.speed(5)
    t.width(3)
    t.color('blue')
    t.left(90)
    t.forward(50)
    ls_heads.append(t.pos())
    t.backward(50)
    t.right(90)
    draw_x()
    t.color('green1')
    t.forward(50)
    t.color('black')
    t.write("D", align="right", font=("Arial", 15, "normal"))
    t.left(90)
    t.color('red1')
    t.forward(25)
    t.color('black')
    t.write(str[1].upper(), font=("Arial", 15, "normal"))
    t.color('red1')
    t.backward(50)
    t.forward(25)
    t.right(90)
    t.color('black')
    t.write("S", font=("Arial", 15, "normal"))
    t.color('green1')
    t.forward(50)
    t.forward(50)
    t.color('black')
    t.write("D", align="right", font=("Arial", 15, "normal"))
    t.left(90)
    t.color('red1')
    t.forward(25)
    t.color('black')
    t.write(str[3].upper(), font=("Arial", 15, "normal"))
    t.color('red')
    t.backward(50)
    t.forward(25)
    t.right(90)
    t.color('black')
    t.write("S", font=("Arial", 15, "normal"))
    t.color('green1')
    t.forward(50)
    t.right(90)
    t.color('blue')
    t.forward(50)
    t.left(90)
    ls_tails.append(t.pos())
    t.penup()
    t.goto(-200, t.ycor() - 50)
    t.pendown()

def draw_AandB_pdiff(str):
    t.speed(5)
    t.width(3)
    t.color('blue')
    t.left(90)
    t.forward(50)
    pdiff_heads.append(t.pos())
    t.backward(50)
    t.right(90)
    draw_x()
    t.color('yellow')
    t.forward(50)
    t.color('black')
    t.write("S", align="right", font=("Arial", 15, "normal"))
    t.left(90)
    t.color('red1')
    t.forward(25)
    t.color('black')
    t.write(str[1].upper(), font=("Arial", 15, "normal"))
    t.color('red1')
    t.backward(50)
    t.forward(25)
    t.right(90)
    t.color('black')
    t.write("D", font=("Arial", 15, "normal"))
    t.color('yellow')
    t.forward(50)
    t.right(90)
    draw_x()
    t.color('blue')
    t.forward(50)
    pdiff_tails.append(t.pos())
    t.backward(50)
    t.left(90)
    t.color('yellow')
    t.forward(50)
    t.color('black')
    t.write("D", align="right", font=("Arial", 15, "normal"))
    t.left(90)
    t.color('red1')
    t.forward(25)
    t.color('black')
    t.write(str[3].upper(), font=("Arial", 15, "normal"))
    t.color('red')
    t.backward(50)
    t.forward(25)
    t.right(90)
    t.color('black')
    t.write("S", font=("Arial", 15, "normal"))
    t.color('yellow')
    t.forward(50)
    t.left(90)
    t.forward(40)
    t.left(90)
    t.forward(175)
    t.left(90)
    t.forward(40)
    t.left(90)
    t.penup()
    t.goto(-200, t.ycor() + 100)
    t.pendown()

    
def draw_AorBorC(str):
    t.speed(5)
    t.width(3)
    t.color('blue')
    t.left(90)
    t.forward(50)
    ls_heads.append(t.pos())
    t.backward(50)
    t.right(90)
    draw_x()
    t.color('green1')
    t.forward(50)
    t.color('black')
    t.write("D", align="right", font=("Arial", 15, "normal"))
    t.left(90)
    t.color('red1')
    t.forward(25)
    t.color('black')
    t.write(str[1].upper(), font=("Arial", 15, "normal"))
    t.color('red1')
    t.backward(50)
    t.forward(25)
    t.right(90)
    t.color('black')
    t.write("S", font=("Arial", 15, "normal"))
    t.color('green1')
    t.forward(50)
    t.right(90)
    draw_x()
    t.color('blue')
    t.forward(40)
    ls_tails.append(t.pos())
    t.backward(40)
    t.left(90)
    t.color('green1')
    t.forward(50)
    t.color('black')
    t.write("S", align="right", font=("Arial", 15, "normal"))
    t.left(90)
    t.color('red1')
    t.forward(25)
    t.color('black')
    t.write(str[3].upper(), font=("Arial", 15, "normal"))
    t.color('red1')
    t.backward(50)
    t.forward(25)
    t.right(90)
    t.color('black')
    t.write("D", font=("Arial", 15, "normal"))
    t.color('green1')
    t.forward(50)
    t.left(90)
    t.forward(40)
    t.left(90)
    t.forward(175)
    t.left(90)
    t.forward(40)
    t.backward(40)
    t.right(90)
    t.backward(175)
    t.right(90)
    t.backward(40)
    t.right(90)
    t.forward(50)
    t.color('black')
    t.write("D",align="right", font=("Arial", 15, "normal"))
    t.write("S", font=("Arial", 15, "normal"))
    t.left(90)
    t.color('red1')
    t.forward(25)
    t.color('black')
    t.write(str[5].upper(), font=("Arial", 15, "normal"))
    t.color('red1')
    t.backward(50)
    t.forward(25)
    t.right(90)
    t.color('green1')
    t.forward(50)
    draw_x()
    t.color('blue')
    t.right(90)
    t.forward(40)
    t.right(90)
    t.forward(200)
    t.penup()
    t.goto(-200, t.ycor() - 50)
    t.left(90)
    t.left(90)
    t.pendown()

def draw_AorBorC_pdiff(str):
    t.speed(5)
    t.width(3)
    t.color('blue')
    t.left(90)
    t.forward(50)
    pdiff_heads.append(t.pos())
    t.backward(50)
    t.right(90)
    draw_x()
    t.color('yellow')
    t.forward(50)
    t.color('black')
    t.write("S", align="right", font=("Arial", 15, "normal"))
    t.write("D", font=("Arial", 15, "normal"))
    t.left(90)
    t.forward(25)
    t.write(str[1].upper(), font=("Arial", 15, "normal"))
    t.color('red1')
    t.backward(50)
    t.forward(25)
    t.right(90)
    t.color('yellow')
    t.forward(50)
    t.forward(50)
    t.color('black')
    t.write("D", align="right", font=("Arial", 15, "normal"))
    t.write("S", font=("Arial", 15, "normal"))
    t.left(90)
    t.forward(25)
    t.write(str[3].upper(), font=("Arial", 15, "normal"))
    t.color('red1')
    t.backward(50)
    t.forward(25)
    t.right(90)
    t.color('yellow')
    t.forward(50)
    t.forward(50)
    t.color('black')
    t.write("S",align="right", font=("Arial", 15, "normal"))
    t.write("D", font=("Arial", 15, "normal"))
    t.left(90)
    t.forward(25)
    t.write(str[5].upper(), font=("Arial", 15, "normal"))
    t.color('red1')
    t.backward(50)
    t.forward(25)
    t.right(90)
    t.color('yellow')
    t.forward(50)
    draw_x()
    t.color('blue')
    t.right(90)
    t.forward(50)
    pdiff_tails.append(t.pos())
    t.penup()
    t.goto(-200, t.ycor() + 150)
    t.left(90)
    t.pendown()

def draw_AandBandC_ndiff(str):
    t.speed(5)
    t.width(3)
    t.color('blue')
    t.left(90)
    t.forward(50)
    ls_heads.append(t.pos())
    t.backward(50)
    t.right(90)
    draw_x()
    t.color('green1')
    t.forward(50)
    t.color('black')
    t.write("D", align="right", font=("Arial", 15, "normal"))
    t.write("S", font=("Arial", 15, "normal"))
    t.left(90)
    t.forward(25)
    t.write(str[1].upper(), font=("Arial", 15, "normal"))
    t.color('red1')
    t.backward(50)
    t.forward(25)
    t.right(90)
    t.color('green1')
    t.forward(50)
    t.forward(50)
    t.color('black')
    t.write("D", align="right", font=("Arial", 15, "normal"))
    t.write("S", font=("Arial", 15, "normal"))
    t.left(90)
    t.forward(25)
    t.write(str[3].upper(), font=("Arial", 15, "normal"))
    t.color('red1')
    t.backward(50)
    t.forward(25)
    t.right(90)
    t.color('green1')
    t.forward(50)
    t.forward(50)
    t.color('black')
    t.write("D",align="right", font=("Arial", 15, "normal"))
    t.write("S", font=("Arial", 15, "normal"))
    t.left(90)
    t.forward(25)
    t.write(str[5].upper(), font=("Arial", 15, "normal"))
    t.color('red1')
    t.backward(50)
    t.forward(25)
    t.right(90)
    t.color('green1')
    t.forward(50)
    draw_x()
    t.color('blue')
    t.right(90)
    t.forward(50)
    ls_tails.append(t.pos())
    t.penup()
    t.goto(-200, t.ycor() - 50)
    t.left(90)
    t.pendown()

def draw_AandBandC_pdiff(str):
    t.speed(5)
    t.width(3)
    t.color('blue')
    t.left(90)
    t.forward(50)
    pdiff_heads.append(t.pos())
    t.backward(50)
    t.right(90)
    draw_x()
    t.color('yellow')
    t.forward(50)
    t.color('black')
    t.write("S", align="right", font=("Arial", 15, "normal"))
    t.left(90)
    t.color('red1')
    t.forward(25)
    t.color('black')
    t.write(str[1].upper(), font=("Arial", 15, "normal"))
    t.color('red1')
    t.backward(50)
    t.forward(25)
    t.right(90)
    t.color('black')
    t.write("D", font=("Arial", 15, "normal"))
    t.color('yellow')
    t.forward(50)
    t.right(90)
    draw_x()
    t.color('blue')
    t.forward(50)
    pdiff_tails.append(t.pos())
    t.backward(50)
    t.left(90)
    t.color('yellow')
    t.forward(50)
    t.color('black')
    t.write("D", align="right", font=("Arial", 15, "normal"))
    t.left(90)
    t.color('red1')
    t.forward(25)
    t.color('black')
    t.write(str[3].upper(), font=("Arial", 15, "normal"))
    t.color('red1')
    t.backward(50)
    t.forward(25)
    t.right(90)
    t.color('black')
    t.write("S", font=("Arial", 15, "normal"))
    t.color('yellow')
    t.forward(50)
    t.left(90)
    t.forward(40)
    t.left(90)
    t.forward(175)
    t.left(90)
    t.forward(40)
    t.backward(40)
    t.right(90)
    t.backward(175)
    t.right(90)
    t.backward(40)
    t.right(90)
    t.forward(50)
    t.color('black')
    t.write("S",align="right", font=("Arial", 15, "normal"))
    t.write("D", font=("Arial", 15, "normal"))
    t.left(90)
    t.color('red1')
    t.forward(25)
    t.color('black')
    t.write(str[5].upper(), font=("Arial", 15, "normal"))
    t.color('red1')
    t.backward(50)
    t.forward(25)
    t.right(90)
    t.color('yellow')
    t.forward(50)
    draw_x()
    t.color('blue')
    t.right(90)
    t.forward(50)
    t.right(90)
    t.forward(200)
    t.penup()
    t.goto(-200, t.ycor() + 150)
    t.left(90)
    t.left(90)
    t.pendown()

ofset = 0
r = turtle.Turtle()
r.hideturtle()
def connect_2cor(x, y):
    global ofset
    r.width(3)
    r.color('blue')
    r.penup()
    r.goto(x)
    r.pendown()
    r.goto(r.xcor() + ofset, r.ycor())
    r.goto(r.xcor(), y[1])
    r.goto(y)
    ofset = ofset -20
    r.hideturtle()

def draw_Vdd(pos):
    r.penup()
    r.goto(pos)
    r.pendown()
    r.color('blue')
    r.width(3)
    r.write("VDD", font=("Arial", 15, "normal"))
    r.forward(200)
    r.hideturtle()
      
    
def draw_gnd(pos):
    r.penup()
    r.goto(pos)
    r.pendown()
    r.color('blue')
    r.width(3)
    r.forward(100)
    r.backward(200)
    r.write("GND", font=("Arial", 15, "normal"))
    r.hideturtle()

def format_A_and_B(str):
    if (len(str) == 5 and str[2] == '*'):
        return True
    return False
def format_A_or_B(str):
    if (len(str) == 5 and str[2] == '+'):
        return True
    return False
def format_A_or_B_or_C(str):
    if (len(str) == 7 and str[2] == '+'):
        return True
    return False
def format_A_and_B_and_C(str):
    if (len(str) == 7 and str[2] == '*'):
        return True
    return False
def format_A(str):
    if (len(str) == 3 and str[1].isalpha()):
        return True
    return False
def add_parenthesis(y):
    index = y.find(")*(")
    while (index != -1):
        y = y[:index+1] + 'x' + y[index+2:]
        stack = []
        for i in range(index, -1, -1):
            if (y[i] == ")"):
                
                stack.append(i)
            elif (y[i] == "(" and len(stack) == 1):
                y = y[0:i] + '(' + y[i:]
                
                stack.pop()
                break;
            elif (y[i] == "("):
                stack.pop()
        
        for i in range(index+2, len(y)):
            if (y[i] == "("):
                
                stack.append(i)
            elif (y[i] == ")" and len(stack) == 1):
                y = y[0:i] + ')' + y[i:]
                
                stack.pop()
                break;
            elif (y[i] == ")"):
                stack.pop()
        index = y.find(")*(")
        
    index = y.find(")+(")
    while (index != -1):
        y = y[:index+1] + '~' + y[index+2:]
        stack = []
        for i in range(index, -1, -1):
            if (y[i] == ")"):
                
                stack.append(i)
            elif (y[i] == "(" and len(stack) == 1):
                y = y[0:i] + '(' + y[i:]
                
                stack.pop()
                break;
            elif (y[i] == "("):
                stack.pop()
        
        for i in range(index+2, len(y)):
            if (y[i] == "("):
                
                stack.append(i)
            elif (y[i] == ")" and len(stack) == 1):
                y = y[0:i] + ')' + y[i:]
                
                stack.pop()
                break;
            elif (y[i] == ")"):
                stack.pop()
        index = y.find(")+(")
    y = y.replace("x", "*")
    y = y.replace("~", "+")
    return y


option = input("Enter an epression (press 0) or test automatically (press other letter): ")

if (option == "0"):
    temp = input("Enter an expression")
    e = [temp]
else:
    e = ["(a)", "(a+b)", "(a*b)", "(a+b+c)", "(a*b*c)", "(a+b)*(c)", "(a*b)+(c)", "(a+b)*(c)+(d*e)", "(a*b)+(c)*(d+e)"]
t = turtle.Turtle() 
for y in e:
   
    t.penup()
    t.goto(-600, 200)
    t.write(y, font=("Arial", 20, "normal"))
    t.goto(-200, 0)
    t.pendown()
    ls_heads = []
    ls_tails = []
    ls = []
    ofset = 0
    y = add_parenthesis(y)
    print(y)
    str = ""
    for i in y:
        ls.append(i)
        if (i == ')'):
            j = len(ls) - 1
            str = ""
            while (ls[j] != '('):
                str += ls.pop()
                j -= 1
            str += ls.pop()
            str = "".join(reversed(str))
            print("str" + str)
            if (format_A_and_B(str)):
                draw_AandB_ndiff(str)
            if (format_A_or_B(str)):
                draw_AorB(str)
            if (format_A(str)):
                draw_A(str)
            if (format_A_or_B_or_C(str)):
                draw_AorBorC(str)
            if (format_A_and_B_and_C(str)):
                draw_AandBandC_ndiff(str)
            if (str == "(+)"):
                connect_2cor(ls_heads[-1], ls_heads[-2])
                connect_2cor(ls_tails[-1], ls_tails[-2])
                ls_heads.pop(-1)
                ls_tails.pop(-2)
            if (str == "(*)"):
                connect_2cor(ls_tails[-2], ls_heads[-1])
                ls_heads.pop(-1)
                ls_tails.pop(-2)
                print(ofset)
            print(ls_heads)
            print(ls_tails)

    print(ls_heads)
    print(ls_tails)

    pdiff_heads = []
    pdiff_tails = []
    t.penup()
    t.goto(-200, 100)
    t.pendown()
    ofset = 0
    for i in y:
        ls.append(i)
        if (i == ')'):
            j = len(ls) - 1
            str = ""
            while (ls[j] != '('):
                str += ls.pop()
                j -= 1
            str += ls.pop()
            str = "".join(reversed(str))
            print("str" + str)
            if (format_A_and_B(str)):
                draw_AandB_pdiff(str)
            if (format_A_or_B(str)):
                draw_AorB_pdiff(str)
            if (format_A(str)):
                draw_A_pdiff(str)
            if (format_A_or_B_or_C(str)):
                draw_AorBorC_pdiff(str)
            if (format_A_and_B_and_C(str)):
                draw_AandBandC_pdiff(str)
            if (str == "(+)"):
                connect_2cor(pdiff_tails[-1], pdiff_heads[-2])
                pdiff_heads.pop(-2)
                pdiff_tails.pop(-1)
            if (str == "(*)"):
                connect_2cor(pdiff_heads[-1], pdiff_heads[-2])
                connect_2cor(pdiff_tails[-1], pdiff_tails[-2])
                pdiff_heads.pop(-2)
                pdiff_tails.pop(-1)

    t.penup()
    t.goto(pdiff_tails[0])
    t.color('blue')
    t.pendown()
    t.forward(100)
    t.write(" Y", font=("Arial", 15, "normal"))
    connect_2cor(pdiff_tails[0], ls_heads[0])     
    draw_Vdd(pdiff_heads[0])
    draw_gnd(ls_tails[0])
    print(pdiff_heads)
    print(pdiff_tails)
    time.sleep(10)
    t.hideturtle()
    t.clear()
    r.clear()
    
turtle.done()




